/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const TICKET_DISCRIMINATOR = new Uint8Array([
  41, 228, 24, 165, 78, 90, 235, 200,
]);

export function getTicketDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TICKET_DISCRIMINATOR);
}

export type Ticket = {
  discriminator: ReadonlyUint8Array;
  event: Address;
  buyer: Address;
  price: bigint;
};

export type TicketArgs = {
  event: Address;
  buyer: Address;
  price: number | bigint;
};

export function getTicketEncoder(): FixedSizeEncoder<TicketArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['event', getAddressEncoder()],
      ['buyer', getAddressEncoder()],
      ['price', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: TICKET_DISCRIMINATOR })
  );
}

export function getTicketDecoder(): FixedSizeDecoder<Ticket> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['event', getAddressDecoder()],
    ['buyer', getAddressDecoder()],
    ['price', getU64Decoder()],
  ]);
}

export function getTicketCodec(): FixedSizeCodec<TicketArgs, Ticket> {
  return combineCodec(getTicketEncoder(), getTicketDecoder());
}

export function decodeTicket<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Ticket, TAddress>;
export function decodeTicket<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Ticket, TAddress>;
export function decodeTicket<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Ticket, TAddress> | MaybeAccount<Ticket, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTicketDecoder()
  );
}

export async function fetchTicket<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Ticket, TAddress>> {
  const maybeAccount = await fetchMaybeTicket(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTicket<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Ticket, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTicket(maybeAccount);
}

export async function fetchAllTicket(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Ticket>[]> {
  const maybeAccounts = await fetchAllMaybeTicket(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTicket(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Ticket>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeTicket(maybeAccount));
}

export function getTicketSize(): number {
  return 80;
}
