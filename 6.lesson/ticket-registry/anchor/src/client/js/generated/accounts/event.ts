/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const EVENT_DISCRIMINATOR = new Uint8Array([
  125, 192, 125, 158, 9, 115, 152, 233,
]);

export function getEventDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(EVENT_DISCRIMINATOR);
}

export type Event = {
  discriminator: ReadonlyUint8Array;
  name: string;
  description: string;
  ticketPrice: bigint;
  availableTickets: bigint;
  eventOrganizer: Address;
  startDate: bigint;
};

export type EventArgs = {
  name: string;
  description: string;
  ticketPrice: number | bigint;
  availableTickets: number | bigint;
  eventOrganizer: Address;
  startDate: number | bigint;
};

export function getEventEncoder(): Encoder<EventArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['description', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['ticketPrice', getU64Encoder()],
      ['availableTickets', getU64Encoder()],
      ['eventOrganizer', getAddressEncoder()],
      ['startDate', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: EVENT_DISCRIMINATOR })
  );
}

export function getEventDecoder(): Decoder<Event> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['ticketPrice', getU64Decoder()],
    ['availableTickets', getU64Decoder()],
    ['eventOrganizer', getAddressDecoder()],
    ['startDate', getI64Decoder()],
  ]);
}

export function getEventCodec(): Codec<EventArgs, Event> {
  return combineCodec(getEventEncoder(), getEventDecoder());
}

export function decodeEvent<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Event, TAddress>;
export function decodeEvent<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Event, TAddress>;
export function decodeEvent<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Event, TAddress> | MaybeAccount<Event, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getEventDecoder()
  );
}

export async function fetchEvent<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Event, TAddress>> {
  const maybeAccount = await fetchMaybeEvent(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeEvent<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Event, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeEvent(maybeAccount);
}

export async function fetchAllEvent(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Event>[]> {
  const maybeAccounts = await fetchAllMaybeEvent(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeEvent(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Event>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeEvent(maybeAccount));
}
