/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedBuyInstruction,
  type ParsedInitializeInstruction,
  type ParsedWithdrawInstruction,
} from '../instructions';

export const TICKETREGISTRY_PROGRAM_ADDRESS =
  'BmFQacFwfih2uHD5w4S8jZYJXSapKdFUW4WtUunt4cbM' as Address<'BmFQacFwfih2uHD5w4S8jZYJXSapKdFUW4WtUunt4cbM'>;

export enum TicketregistryAccount {
  Event,
  Ticket,
}

export function identifyTicketregistryAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TicketregistryAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([125, 192, 125, 158, 9, 115, 152, 233])
      ),
      0
    )
  ) {
    return TicketregistryAccount.Event;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([41, 228, 24, 165, 78, 90, 235, 200])
      ),
      0
    )
  ) {
    return TicketregistryAccount.Ticket;
  }
  throw new Error(
    'The provided account could not be identified as a ticketregistry account.'
  );
}

export enum TicketregistryInstruction {
  Buy,
  Initialize,
  Withdraw,
}

export function identifyTicketregistryInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TicketregistryInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([102, 6, 61, 18, 1, 218, 235, 234])
      ),
      0
    )
  ) {
    return TicketregistryInstruction.Buy;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return TicketregistryInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([183, 18, 70, 156, 148, 109, 161, 34])
      ),
      0
    )
  ) {
    return TicketregistryInstruction.Withdraw;
  }
  throw new Error(
    'The provided instruction could not be identified as a ticketregistry instruction.'
  );
}

export type ParsedTicketregistryInstruction<
  TProgram extends string = 'BmFQacFwfih2uHD5w4S8jZYJXSapKdFUW4WtUunt4cbM',
> =
  | ({
      instructionType: TicketregistryInstruction.Buy;
    } & ParsedBuyInstruction<TProgram>)
  | ({
      instructionType: TicketregistryInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: TicketregistryInstruction.Withdraw;
    } & ParsedWithdrawInstruction<TProgram>);
