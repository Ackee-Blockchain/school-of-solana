/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { TICKETREGISTRY_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const BUY_DISCRIMINATOR = new Uint8Array([
  102, 6, 61, 18, 1, 218, 235, 234,
]);

export function getBuyDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(BUY_DISCRIMINATOR);
}

export type BuyInstruction<
  TProgram extends string = typeof TICKETREGISTRY_PROGRAM_ADDRESS,
  TAccountBuyer extends string | AccountMeta<string> = string,
  TAccountTicket extends string | AccountMeta<string> = string,
  TAccountEvent extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountBuyer extends string
        ? WritableSignerAccount<TAccountBuyer> &
            AccountSignerMeta<TAccountBuyer>
        : TAccountBuyer,
      TAccountTicket extends string
        ? WritableAccount<TAccountTicket>
        : TAccountTicket,
      TAccountEvent extends string
        ? WritableAccount<TAccountEvent>
        : TAccountEvent,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type BuyInstructionData = { discriminator: ReadonlyUint8Array };

export type BuyInstructionDataArgs = {};

export function getBuyInstructionDataEncoder(): FixedSizeEncoder<BuyInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: BUY_DISCRIMINATOR })
  );
}

export function getBuyInstructionDataDecoder(): FixedSizeDecoder<BuyInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getBuyInstructionDataCodec(): FixedSizeCodec<
  BuyInstructionDataArgs,
  BuyInstructionData
> {
  return combineCodec(
    getBuyInstructionDataEncoder(),
    getBuyInstructionDataDecoder()
  );
}

export type BuyAsyncInput<
  TAccountBuyer extends string = string,
  TAccountTicket extends string = string,
  TAccountEvent extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  buyer: TransactionSigner<TAccountBuyer>;
  ticket?: Address<TAccountTicket>;
  event: Address<TAccountEvent>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getBuyInstructionAsync<
  TAccountBuyer extends string,
  TAccountTicket extends string,
  TAccountEvent extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TICKETREGISTRY_PROGRAM_ADDRESS,
>(
  input: BuyAsyncInput<
    TAccountBuyer,
    TAccountTicket,
    TAccountEvent,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  BuyInstruction<
    TProgramAddress,
    TAccountBuyer,
    TAccountTicket,
    TAccountEvent,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TICKETREGISTRY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    buyer: { value: input.buyer ?? null, isWritable: true },
    ticket: { value: input.ticket ?? null, isWritable: true },
    event: { value: input.event ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.ticket.value) {
    accounts.ticket.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([116, 105, 99, 107, 101, 116])),
        getAddressEncoder().encode(expectAddress(accounts.event.value)),
        getAddressEncoder().encode(expectAddress(accounts.buyer.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.buyer),
      getAccountMeta(accounts.ticket),
      getAccountMeta(accounts.event),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getBuyInstructionDataEncoder().encode({}),
  } as BuyInstruction<
    TProgramAddress,
    TAccountBuyer,
    TAccountTicket,
    TAccountEvent,
    TAccountSystemProgram
  >;

  return instruction;
}

export type BuyInput<
  TAccountBuyer extends string = string,
  TAccountTicket extends string = string,
  TAccountEvent extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  buyer: TransactionSigner<TAccountBuyer>;
  ticket: Address<TAccountTicket>;
  event: Address<TAccountEvent>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getBuyInstruction<
  TAccountBuyer extends string,
  TAccountTicket extends string,
  TAccountEvent extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TICKETREGISTRY_PROGRAM_ADDRESS,
>(
  input: BuyInput<
    TAccountBuyer,
    TAccountTicket,
    TAccountEvent,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): BuyInstruction<
  TProgramAddress,
  TAccountBuyer,
  TAccountTicket,
  TAccountEvent,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TICKETREGISTRY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    buyer: { value: input.buyer ?? null, isWritable: true },
    ticket: { value: input.ticket ?? null, isWritable: true },
    event: { value: input.event ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.buyer),
      getAccountMeta(accounts.ticket),
      getAccountMeta(accounts.event),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getBuyInstructionDataEncoder().encode({}),
  } as BuyInstruction<
    TProgramAddress,
    TAccountBuyer,
    TAccountTicket,
    TAccountEvent,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedBuyInstruction<
  TProgram extends string = typeof TICKETREGISTRY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    buyer: TAccountMetas[0];
    ticket: TAccountMetas[1];
    event: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: BuyInstructionData;
};

export function parseBuyInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedBuyInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      buyer: getNextAccount(),
      ticket: getNextAccount(),
      event: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getBuyInstructionDataDecoder().decode(instruction.data),
  };
}
