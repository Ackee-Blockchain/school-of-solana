/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { TICKETREGISTRY_PROGRAM_ADDRESS } from '../programs';

/** NameTooLong: Name too long */
export const TICKETREGISTRY_ERROR__NAME_TOO_LONG = 0x1770; // 6000
/** DescriptionTooLong: Description too long */
export const TICKETREGISTRY_ERROR__DESCRIPTION_TOO_LONG = 0x1771; // 6001
/** StartDateInThePast: Start date is in the past */
export const TICKETREGISTRY_ERROR__START_DATE_IN_THE_PAST = 0x1772; // 6002
/** AvailableTicketsTooLow: Available tickets is too low */
export const TICKETREGISTRY_ERROR__AVAILABLE_TICKETS_TOO_LOW = 0x1773; // 6003
/** AllTicketsSoldOut: All tickets sold out */
export const TICKETREGISTRY_ERROR__ALL_TICKETS_SOLD_OUT = 0x1774; // 6004

export type TicketregistryError =
  | typeof TICKETREGISTRY_ERROR__ALL_TICKETS_SOLD_OUT
  | typeof TICKETREGISTRY_ERROR__AVAILABLE_TICKETS_TOO_LOW
  | typeof TICKETREGISTRY_ERROR__DESCRIPTION_TOO_LONG
  | typeof TICKETREGISTRY_ERROR__NAME_TOO_LONG
  | typeof TICKETREGISTRY_ERROR__START_DATE_IN_THE_PAST;

let ticketregistryErrorMessages:
  | Record<TicketregistryError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  ticketregistryErrorMessages = {
    [TICKETREGISTRY_ERROR__ALL_TICKETS_SOLD_OUT]: `All tickets sold out`,
    [TICKETREGISTRY_ERROR__AVAILABLE_TICKETS_TOO_LOW]: `Available tickets is too low`,
    [TICKETREGISTRY_ERROR__DESCRIPTION_TOO_LONG]: `Description too long`,
    [TICKETREGISTRY_ERROR__NAME_TOO_LONG]: `Name too long`,
    [TICKETREGISTRY_ERROR__START_DATE_IN_THE_PAST]: `Start date is in the past`,
  };
}

export function getTicketregistryErrorMessage(
  code: TicketregistryError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (ticketregistryErrorMessages as Record<TicketregistryError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isTicketregistryError<
  TProgramErrorCode extends TicketregistryError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    TICKETREGISTRY_PROGRAM_ADDRESS,
    code
  );
}
